{"version":3,"sources":["index.js"],"names":["Square","props","className","winClass","onClick","value","Board","renderSquare","i","winCombination","includes","squares","items","subItems","j","push","generateGrid","Game","React","useState","Array","fill","setSquares","history","setHistory","xIsNext","setNextX","step","setStep","sortAsc","setsortAsc","movesList","setMoves","useEffect","sortDOM","winner","calculateWinner","status","won","checkForWinner","moves","jumpTo","map","move","desc","order","getHistoryElementsList","moveSteps","moveString","index","getMoveElement","class","historyCopy","slice","current","length","movePos","columns","1","2","3","rows","prop","subProp","getMoveString","moveListCopy","concat","handleClick","combination","undefined","id","lines","a","b","c","elementId","list","document","getElementById","childNodes","itemsArr","sort","attributes","appendChild","ReactDOM","render"],"mappings":"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","file":"static/js/main.c7e16d89.chunk.js","sourcesContent":["import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\n\nconst Square = (props) => {\n    return (\n        <button\n            className={`square ${props.winClass}`}\n            onClick={props.onClick}>\n            {props.value}\n        </button>\n    );\n}\n\n\nconst Board = (props) => {\n\n    const renderSquare = (props, i) => {\n        let winClass = '';\n\n        if (props.winCombination) {\n            winClass = props.winCombination.includes(i) ?\n                'square-win' : '';\n        }\n\n        return (\n            <Square\n                key={i}\n                winClass={winClass}\n                value={props.squares[i]}\n                onClick={() => props.onClick(i)}\n            />\n        );\n    }\n\n    const generateGrid = (props) => {\n        // using index as keys, which is suboptimal\n        const items = [];\n\n        for (let i = 0; i < 9; i += 3) {\n            const subItems = [];\n\n            for (let j = 0 + i; j < i + 3; j++) {\n\n                subItems.push(renderSquare(props, j));\n            }\n\n            items.push(\n                <div key={i} className=\"board-row\">{subItems}</div>\n            );\n        }\n\n        return items;\n    }\n\n\n    const items = generateGrid(props);\n    return (\n        <div>\n            {items}\n        </div>\n    );\n}\n\nconst Game = () => {\n    //hooks\n    const [squares, setSquares] = React.useState(Array(9).fill(null));\n    const [history, setHistory] = React.useState([squares]);\n    const [xIsNext, setNextX] = React.useState(true);\n    const [step, setStep] = React.useState(0);\n    const [sortAsc, setsortAsc] = React.useState(true);\n    const [movesList, setMoves] = React.useState(['start-move']);\n\n    React.useEffect(() => {\n        sortDOM(sortAsc, 'info-history');\n        sortDOM(sortAsc, 'moves-history');\n    }, [sortAsc, squares]);\n\n\n    const handleClick = (i) => {\n        const historyCopy = history.slice(0, step + 1);\n        const current = historyCopy[historyCopy.length - 1].slice();\n\n        // check if winner or if square is not null\n        if (calculateWinner(current) || current[i]) {\n            return\n        }\n\n        current[i] = xIsNext ? 'X' : 'O';\n\n        //setting up move history\n        const moveString = getMoveString(i, xIsNext);\n        const moveListCopy = movesList.slice(0, step + 1);\n\n\n        setSquares(current);\n        setHistory(historyCopy.concat([current]))\n        setStep(historyCopy.length);\n        setNextX(!xIsNext);// set the xIsNext to the opposite Bool value\n        setMoves(moveListCopy.concat(moveString));\n    }\n\n    const jumpTo = (step) => {\n        setStep(step);\n\n        const isStepNumEven = (step % 2) === 0;\n        setNextX(isStepNumEven);\n    }\n\n\n    const winner = calculateWinner(squares);\n    const status = checkForWinner(winner, xIsNext, step);\n    const moves = getHistoryElementsList(history, jumpTo, sortAsc);\n    const moveSteps = getMoveElement(movesList);\n\n\n    return (\n        <div className=\"game\">\n            <h1 class='game-mobile-header'>Tic Tac Toe Mobile</h1>\n            <div className=\"game-board\">\n                <Board\n                    squares={history[step]}\n                    onClick={(i) => handleClick(i)}\n                    winCombination={winner ? winner.combination : undefined}\n                />\n            </div>\n            <div className=\"game-info\">\n                <div className=\"status\">\n                    {status}\n                    <button className=\"sort\" onClick={() => setsortAsc(!sortAsc)}>\n                        {'sort'}\n                    </button>\n                </div>\n                <ol id='info-history'>{moves}</ol>\n            </div>\n            <div className=\"game-info moves-history\">\n                <ol id='moves-history'>\n                    {moveSteps}\n                </ol>\n            </div>\n        </div>\n    );\n\n}\n\n// ========================================\n\nReactDOM.render(\n    <Game />,\n    document.getElementById('root')\n);\n\n// ======= SUPPORTING FUNCTIONS ==========\n\nfunction calculateWinner(squares) {\n    const lines = [\n        [0, 1, 2],\n        [3, 4, 5],\n        [6, 7, 8],\n        [0, 3, 6],\n        [1, 4, 7],\n        [2, 5, 8],\n        [0, 4, 8],\n        [2, 4, 6],\n    ];\n    for (let i = 0; i < lines.length; i++) {\n        const [a, b, c] = lines[i];\n        if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\n\n            // need to return combination to highlight winning squares\n            return { won: squares[a], combination: lines[i] }\n        }\n    }\n    return null;\n}\n\nfunction checkForWinner(winner, xIsNext, step) {\n    let status;\n\n    if (winner) {\n        status = `Winner:${winner.won}`;\n    } else if (step === 9) {\n        status = 'Its a Draw!';\n    } else {\n        status = `Next player: ${xIsNext ? 'X' : 'O'} `;\n    }\n\n    return status;\n\n}\n\nfunction getHistoryElementsList(history, jumpTo) {\n\n    const moves = history.map((step, move) => {\n        const desc = move ?\n            `Go to move #${move}`\n            : 'Go to game start';\n\n        return (\n            // move is an index, and we are adviced not to use it\n            // we can use string of moves as the key\n            <li key={move} order={move}>\n                <button onClick={() => jumpTo(move)}>\n                    {desc}\n                </button>\n            </li>\n        )\n    });\n    return moves;\n\n}\n\nfunction sortDOM(sortAsc, elementId) {\n    const list = document.getElementById(elementId);\n\n    const items = list.childNodes;\n    const itemsArr = [...items];\n\n    if (!sortAsc) {\n        itemsArr.sort((a, b) => {\n            return a.attributes.order.value < b.attributes.order.value\n                ? 1\n                : -1\n        });\n    } else {\n        itemsArr.sort((a, b) => {\n            return a.attributes.order.value < b.attributes.order.value\n                ? -1\n                : 1\n        });\n    }\n\n    for (let i = 0; i < itemsArr.length; ++i) {\n        list.appendChild(itemsArr[i]);\n    }\n\n}\n\n// move list\nfunction getMoveString(i, xIsNext) {\n\n    const columns = {\n        1: [0, 3, 6],\n        2: [1, 4, 7],\n        3: [2, 5, 8]\n    }\n\n    const rows = {\n        1: [0, 1, 2],\n        2: [3, 4, 5],\n        3: [6, 7, 8]\n    }\n\n    const whoMoves = xIsNext ? 'X' : 'O';\n    let moveString = `${whoMoves} moved to `;\n    let movePos;\n\n    for (const prop in columns) {\n        if (columns[prop].includes(i)) {\n            movePos = `(col:${prop}, `;\n\n            for (const subProp in rows) {\n                if (rows[subProp].includes(i)) movePos = movePos + `row:${subProp})`;\n\n            }\n        }\n    }\n\n    return moveString + movePos;\n}\n\n\nfunction getMoveElement(movesList) {\n\n    const stepMoves = movesList.map((moveString, index) => {\n        return (\n            // move is an index, and we are adviced not to use it\n            // we can use string of moves as the key\n            <li key={index} order={index}>\n                {moveString}\n            </li>\n        )\n    });\n    return stepMoves;\n\n}"],"sourceRoot":""}